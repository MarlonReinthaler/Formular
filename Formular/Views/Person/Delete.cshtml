@using Formular.Models
@model Person
@{
    ViewData["Title"] = "Delete";
}

<form method="POST" asp-action="DeletePost">
    <input asp-for="Id" hidden/>
    <div class="form-group">
        @Html.LabelFor(m => m.Name, new { })
        @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control" } })
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.Ort, new { })
            @Html.EditorFor(m => m.Ort, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control" } })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.PLZ, new { })
            @Html.EditorFor(m => m.PLZ, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.PAlter, new { })
        @Html.EditorFor(m => m.PAlter, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control" } })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { })
        @Html.EditorFor(m => m.Email, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control" } })
    </div>

    <input type="submit" class="btn btn-outline-danger" value="Delete" />
    <a asp-action="Index" class="btn btn-outline-success">Back</a>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
} 